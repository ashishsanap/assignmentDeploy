{"version":3,"sources":["api/register/register.controller.js"],"names":["decode","index","value","key","crypto","createCipher","process","env","CRYPTO_ALGO","SECRET_KEY","password","update","final","req","res","console","log","body","User","create","then","user","status","json","success","message","data","catch","err","errmsg","includes"],"mappings":";;;;;QAMgBA,M,GAAAA,M;QAOAC,K,GAAAA,K;;AAZhB;;;;AAEA;;;;;;AAHA;AAMO,SAASD,MAAT,CAAgBE,KAAhB,EAAuB;AAC5B,QAAMC,MAAMC,iBAAOC,YAAP,CAAoBC,QAAQC,GAAR,CAAYC,WAAhC,EAA6CF,QAAQC,GAAR,CAAYE,UAAzD,CAAZ,CAD4B,CACqD;AACjF,MAAIC,WAAWP,IAAIQ,MAAJ,CAAWT,KAAX,EAAkB,MAAlB,EAA0B,KAA1B,CAAf;AACAQ,cAAYP,IAAIS,KAAJ,CAAU,KAAV,CAAZ;AACA,SAAOF,QAAP;AACD;AACD;AACO,SAAST,KAAT,CAAeY,GAAf,EAAoBC,GAApB,EAAyB;AAC9BC,UAAQC,GAAR,CAAYH,IAAII,IAAhB;AACAJ,MAAII,IAAJ,CAASP,QAAT,GAAoBV,OAAOa,IAAII,IAAJ,CAASP,QAAhB,CAApB;AACAQ,iBAAKC,MAAL,CAAYN,IAAII,IAAhB,EAAsBG,IAAtB,CAA4BC,IAAD,IAAU;AACnCN,YAAQC,GAAR,CAAYK,IAAZ;AACA,WAAOP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,IAAX,EAAiBC,SAAS,8BAA1B,EAA0DC,MAAML,IAAhE,EAArB,CAAP;AACD,GAHD,EAGGM,KAHH,CAGUC,GAAD,IAAS;AAChB,QAAIA,IAAIC,MAAJ,CAAWC,QAAX,CAAoB,WAApB,CAAJ,EAAsC;AACpC,aAAOhB,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,yBAA3B,EAAsDC,MAAM,yCAA5D,EAArB,CAAP;AACD;AACD,WAAOZ,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,sBAA3B,EAAmDC,MAAM,EAAzD,EAA6DE,GAA7D,EAArB,CAAP;AACD,GARD;AASD","file":"register.controller.js","sourcesContent":["/* eslint-disable consistent-return,max-len,no-param-reassign */\nimport crypto from 'crypto';\n\nimport User from './user.model';\n\n\nexport function decode(value) {\n  const key = crypto.createCipher(process.env.CRYPTO_ALGO, process.env.SECRET_KEY);// abc replace by some data\n  let password = key.update(value, 'utf8', 'hex');\n  password += key.final('hex');\n  return password;\n}\n// eslint-disable-next-line import/prefer-default-export\nexport function index(req, res) {\n  console.log(req.body);\n  req.body.password = decode(req.body.password);\n  User.create(req.body).then((user) => {\n    console.log(user);\n    return res.status(200).json({ success: true, message: 'Account Created Successfully', data: user });\n  }).catch((err) => {\n    if (err.errmsg.includes('duplicate')) {\n      return res.status(409).json({ success: false, message: 'Account Already Present', data: 'Email or Mobile Number already register' });\n    }\n    return res.status(500).json({ success: false, message: 'Something Went wrong', data: '', err });\n  });\n}\n\n"]}