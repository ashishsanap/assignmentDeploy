{"version":3,"sources":["api/search/search.controller.js"],"names":["index","nearBy","req","res","googleMapsClient","geocode","address","params","placeName","asPromise","then","response","json","results","placeInfo","dataArr","forEach","item","data","placeAddress","formatted_address","placeId","place_id","location","geometry","push","User","findOneAndUpdate","_id","mongoose","Types","ObjectId","user","$push","searchPlaces","placeResult","date","Date","exec","status","success","message","catch","err","console","log","searchObj","parseFloat","lat","lng","radius","query","name","type","placesNearby","places","obj","rating","vicinity","nearPlaces","result"],"mappings":"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","file":"search.controller.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport mongoose from 'mongoose';\n\nimport googleMapsClient from '../../config/googlemap';\nimport User from '../register/user.model';\n// eslint-disable-next-line import/prefer-default-export\nexport function index(req, res) {\n  googleMapsClient.geocode({ address: req.params.placeName })\n    .asPromise()\n    .then((response) => {\n      if (response && response.json && response.json.results) {\n        const placeInfo = response.json.results;\n        const dataArr = [];\n        placeInfo.forEach((item) => {\n          const data = {\n            placeAddress: item.formatted_address,\n            placeId: item.place_id,\n            location: item.geometry.location,\n          };\n          dataArr.push(data);\n        });\n        User.findOneAndUpdate({ _id: mongoose.Types.ObjectId(req.user._id) },\n          { $push: { searchPlaces: { placeName: req.params.placeName,\n            placeResult: dataArr,\n            date: new Date() } } }).exec();\n        return res.status(200).json({ success: true, message: 'Place Info', data: dataArr });\n      }\n      return res.status(404).json({ success: false, message: 'No place Info Found' });\n    })\n    .catch((err) => {\n      console.log(err);\n      return res.status(500).json({ success: false, message: 'Something went wrong' });\n    });\n}\n\nexport function nearBy(req, res) {\n  const searchObj = {};\n  searchObj.location = [parseFloat(req.params.lat), parseFloat(req.params.lng)];\n  searchObj.radius = parseFloat(req.query.radius) ? parseFloat(req.query.radius) : 5000;\n  if (req.query.name) {\n    searchObj.name = req.query.name;\n  }\n  if (req.query.type) {\n    searchObj.type = req.query.type;\n  }\n  googleMapsClient.placesNearby(searchObj)\n    .asPromise()\n    .then((response) => {\n      if (response && response.json && response.json.results) {\n        const places = response.json.results;\n        const dataArr = [];\n        places.forEach((item) => {\n          const obj = {};\n          obj.rating = item.rating;\n          obj.placeId = item.place_id;\n          obj.name = item.name;\n          obj.address = item.vicinity;\n          obj.location = item.geometry.location;\n          dataArr.push(obj);\n        });\n        User.findOneAndUpdate({ _id: mongoose.Types.ObjectId(req.user._id) },\n          { $push: { nearPlaces: { name: req.query.name,\n            result: dataArr,\n            date: new Date() } } }).exec();\n        return res.status(200).json({ success: true, message: 'Near Place Info', data: dataArr });\n      }\n      return res.status(404).json({ success: false, message: 'No place Info Found' });\n    }).catch((err) => {\n      console.log(err);\n      return res.status(500).json({ success: false, message: 'Something went wrong' });\n    });\n}\n"]}