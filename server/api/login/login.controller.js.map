{"version":3,"sources":["api/login/login.controller.js"],"names":["index","redisClient","require","req","res","keys","body","includes","condition","$or","email","userName","mobileNo","password","User","findOne","__v","then","user","jwt","sign","process","env","JWT_SECKERT_KEY","err","token","status","json","success","message","data","setHeader","set","catch","console","log"],"mappings":";;;;;;;;;;QAQgBA,K,GAAAA,K;;AARhB;;;;AAEA;;AACA;;;;;;AAEA,MAAMC,cAAcC,QAAQ,oBAAR,EAA8BD,WAAlD;;AAEA;AACO,SAASD,KAAT,CAAeG,GAAf,EAAoBC,GAApB,EAAyB;AAC9B,QAAMC,OAAO,oBAAYF,IAAIG,IAAhB,CAAb;AACA,MAAID,KAAKE,QAAL,CAAc,UAAd,KAA6BF,KAAKE,QAAL,CAAc,UAAd,CAAjC,EAA4D;AAC1D,UAAMC,YAAY;AAChBC,WAAK,CACH,EAAEC,OAAOP,IAAIG,IAAJ,CAASK,QAAlB,EADG,EAEH,EAAEC,UAAUT,IAAIG,IAAJ,CAASK,QAArB,EAFG,CADW;AAIhBE,gBAAU,sBAAOV,IAAIG,IAAJ,CAASO,QAAhB;AAJM,KAAlB;AAMA,WAAOC,eAAKC,OAAL,CAAaP,SAAb,EAAwB,EAAEK,UAAU,CAAZ,EAAeG,KAAK,CAApB,EAAxB,EAAiDC,IAAjD,CAAuDC,IAAD,IAAU;AACrE,UAAIA,IAAJ,EAAU;AACRC,+BAAIC,IAAJ,CAAS,EAAEF,IAAF,EAAT,EAAmBG,QAAQC,GAAR,CAAYC,eAA/B,EAAgD,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC9D,cAAID,GAAJ,EAAS;AACP,mBAAOpB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,sBAA3B,EAAmDC,MAAM,EAAzD,EAA6DN,GAA7D,EAArB,CAAP;AACD;AACDpB,cAAI2B,SAAJ,CAAc,eAAd,EAA+BN,KAA/B;AACAxB,sBAAY+B,GAAZ,CAAiB,SAAQd,KAAKR,KAAM,EAApC,EAAuCe,KAAvC,EAA8C,IAA9C,EAAoD,IAApD;AACA,iBAAOrB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,IAAX,EAAiBC,SAAS,oBAA1B,EAAgDC,MAAMZ,IAAtD,EAArB,CAAP;AACD,SAPD;AAQD,OATD,MASO;AACL,eAAOd,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,KADiB;AAE1BC,mBAAS,iCAFiB;AAG1BC,gBAAM3B,IAAIG;AAHgB,SAArB,CAAP;AAKD;AACD,aAAO,IAAP;AACD,KAlBM,EAkBJ2B,KAlBI,CAkBGT,GAAD,IAAS;AAChBU,cAAQC,GAAR,CAAYX,GAAZ;AACA,aAAOpB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,sBAA3B,EAAmDC,MAAM,EAAzD,EAArB,CAAP;AACD,KArBM,CAAP;AAsBD;AACD,SAAO1B,IAAIsB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,SAAS,0BAA3B,EAAuDC,MAAM,EAA7D,EAArB,CAAP;AACD","file":"login.controller.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\nimport { decode } from '../register/register.controller';\nimport User from '../register/user.model';\n\nconst redisClient = require('../../config/redis').redisClient;\n\n// eslint-disable-next-line import/prefer-default-export\nexport function index(req, res) {\n  const keys = Object.keys(req.body);\n  if (keys.includes('userName') && keys.includes('password')) {\n    const condition = {\n      $or: [\n        { email: req.body.userName },\n        { mobileNo: req.body.userName }],\n      password: decode(req.body.password),\n    };\n    return User.findOne(condition, { password: 0, __v: 0 }).then((user) => {\n      if (user) {\n        jwt.sign({ user }, process.env.JWT_SECKERT_KEY, (err, token) => {\n          if (err) {\n            return res.status(500).json({ success: false, message: 'Something went wrong', data: '', err });\n          }\n          res.setHeader('Authorization', token);\n          redisClient.set(`login-${user.email}`, token, 'EX', 3600);\n          return res.status(200).json({ success: true, message: 'Login Successfully', data: user });\n        });\n      } else {\n        return res.status(401).json({\n          success: false,\n          message: 'Incorrect Username and Password',\n          data: req.body,\n        });\n      }\n      return true;\n    }).catch((err) => {\n      console.log(err);\n      return res.status(500).json({ success: false, message: 'Something went wrong', data: '' });\n    });\n  }\n  return res.status(406).json({ success: false, message: 'You Miss some parameters', data: '' });\n}\n"]}