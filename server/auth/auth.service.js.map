{"version":3,"sources":["auth/auth.service.js"],"names":["isAuthenticated","redisClient","require","req","res","next","bearerHeader","header","bearer","split","bearerToken","token","jwt","verify","process","env","JWT_SECKERT_KEY","err","authData","status","json","success","msg","get","user","PM_Client_MobileNumber","reply","console","log","set"],"mappings":";;;;;QAWgBA,e,GAAAA,e;;AAVhB;;;;;;AAEA,MAAMC,cAAcC,QAAQ,iBAAR,EAA2BD,WAA/C;;AAGA;;;;;AANA;AAWO,SAASD,eAAT,CAAyBG,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAC9C,QAAMC,eAAeH,IAAII,MAAJ,CAAW,eAAX,CAArB;AACA,MAAI,OAAOD,YAAP,KAAwB,WAA5B,EAAyC;AACvC,UAAME,SAASF,aAAaG,KAAb,CAAmB,GAAnB,CAAf;AACA,UAAMC,cAAcF,OAAO,CAAP,CAApB;AACAL,QAAIQ,KAAJ,GAAYD,WAAZ;AACAE,2BAAIC,MAAJ,CAAWV,IAAIQ,KAAf,EAAsBG,QAAQC,GAAR,CAAYC,eAAlC,EAAmD,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACpE,UAAID,OAAO,OAAOC,QAAP,KAAoB,WAA/B,EAA4C;AAC1Cd,YAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD,OAFD,MAEO;AACLrB,oBAAYsB,GAAZ,CAAiB,IAAGL,SAASM,IAAT,CAAcC,sBAAuB,EAAzD,EAA4D,CAACR,GAAD,EAAMS,KAAN,KAAgB;AAC1EC,kBAAQC,GAAR,CAAYF,KAAZ;AACA,cAAIT,GAAJ,EAAS;AACPb,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD,WAFD,MAEO,IAAII,UAAUvB,IAAIQ,KAAlB,EAAyB;AAC9BV,wBAAY4B,GAAZ,CAAiB,IAAGX,SAASM,IAAT,CAAcC,sBAAuB,EAAzD,EAA6D,GAAEtB,IAAIQ,KAAM,EAAzE;AACA;AACAR,gBAAIe,QAAJ,GAAeA,SAASM,IAAxB;AACA,mBAAOnB,MAAP;AACD,WALM,MAKA;AACLsB,oBAAQC,GAAR,CAAYF,KAAZ;AACAtB,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD;AACF,SAbD;AAcD;AACF,KAnBD;AAoBD,GAxBD,MAwBO;AACLlB,QAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD;AACD;AACD","file":"auth.service.js","sourcesContent":["/* eslint-disable max-len, import/prefer-default-export */\nimport jwt from 'jsonwebtoken';\n\nconst redisClient = require('../config/redis').redisClient;\n\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\n\nexport function isAuthenticated(req, res, next) {\n  const bearerHeader = req.header('Authorization');\n  if (typeof bearerHeader !== 'undefined') {\n    const bearer = bearerHeader.split(' ');\n    const bearerToken = bearer[1];\n    req.token = bearerToken;\n    jwt.verify(req.token, process.env.JWT_SECKERT_KEY, (err, authData) => {\n      if (err || typeof authData === 'undefined') {\n        res.status(403).json({ success: false, msg: 'Unauthorised access3' });\n      } else {\n        redisClient.get(`R${authData.user.PM_Client_MobileNumber}`, (err, reply) => {\n          console.log(reply);\n          if (err) {\n            res.status(403).json({ success: false, msg: 'Unauthorised access2' });\n          } else if (reply === req.token) {\n            redisClient.set(`R${authData.user.PM_Client_MobileNumber}`, `${req.token}`);\n            // redisClient.expire(`R${authData.user.PM_User_MobileNumber}`, process.env.IDEL_SESSION_TIME); // session time\n            req.authData = authData.user;\n            return next();\n          } else {\n            console.log(reply);\n            res.status(403).json({ success: false, msg: 'Unauthorised access1' });\n          }\n        });\n      }\n    });\n  } else {\n    res.status(403).json({ success: false, msg: 'Unauthorised access4' });\n  }\n  // });\n}\n"]}