{"version":3,"sources":["auth/auth.service.js"],"names":["isAuthenticated","redisClient","require","req","res","next","bearerHeader","header","bearer","split","bearerToken","jwt","verify","process","env","JWT_SECKERT_KEY","err","authData","status","json","success","msg","get","user","email","redisErr","reply","set"],"mappings":";;;;;QAWgBA,e,GAAAA,e;;AAVhB;;;;;;AAEA,MAAMC,cAAcC,QAAQ,iBAAR,EAA2BD,WAA/C;;AAGA;;;;;AANA;AAWO,SAASD,eAAT,CAAyBG,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAC9C,QAAMC,eAAeH,IAAII,MAAJ,CAAW,eAAX,CAArB;AACA,MAAI,OAAOD,YAAP,KAAwB,WAA5B,EAAyC;AACvC,UAAME,SAASF,aAAaG,KAAb,CAAmB,GAAnB,CAAf;AACA,UAAMC,cAAcF,OAAO,CAAP,CAApB;AACAG,2BAAIC,MAAJ,CAAWF,WAAX,EAAwBG,QAAQC,GAAR,CAAYC,eAApC,EAAqD,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACtE,UAAID,OAAO,OAAOC,QAAP,KAAoB,WAA/B,EAA4C;AAC1C,eAAOb,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,qBAAvB,EAArB,CAAP;AACD;AACDpB,kBAAYqB,GAAZ,CAAiB,SAAQL,SAASM,IAAT,CAAcC,KAAM,EAA7C,EAAgD,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACnE,YAAID,QAAJ,EAAc;AACZ,iBAAOrB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,qBAAvB,EAArB,CAAP;AACD,SAFD,MAEO,IAAIK,UAAUhB,WAAd,EAA2B;AAChCT,sBAAY0B,GAAZ,CAAiB,SAAQV,SAASM,IAAT,CAAcC,KAAM,EAA7C,EAAgDE,KAAhD,EAAuD,IAAvD,EAA6D,IAA7D;AACA;AACAvB,cAAIoB,IAAJ,GAAWN,SAASM,IAApB;AACA,iBAAOlB,MAAP;AACD;AACD,eAAOD,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,qBAAvB,EAArB,CAAP;AACD,OAVD;AAWA,aAAO,IAAP;AACD,KAhBD;AAiBD,GApBD,MAoBO;AACL,WAAOjB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,qBAAvB,EAArB,CAAP;AACD;AACD,SAAO,IAAP;AACA;AACD","file":"auth.service.js","sourcesContent":["/* eslint-disable max-len, import/prefer-default-export */\nimport jwt from 'jsonwebtoken';\n\nconst redisClient = require('../config/redis').redisClient;\n\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\n\nexport function isAuthenticated(req, res, next) {\n  const bearerHeader = req.header('Authorization');\n  if (typeof bearerHeader !== 'undefined') {\n    const bearer = bearerHeader.split(' ');\n    const bearerToken = bearer[1];\n    jwt.verify(bearerToken, process.env.JWT_SECKERT_KEY, (err, authData) => {\n      if (err || typeof authData === 'undefined') {\n        return res.status(401).json({ success: false, msg: 'Unauthorised access' });\n      }\n      redisClient.get(`login-${authData.user.email}`, (redisErr, reply) => {\n        if (redisErr) {\n          return res.status(401).json({ success: false, msg: 'Unauthorised access' });\n        } else if (reply === bearerToken) {\n          redisClient.set(`login-${authData.user.email}`, reply, 'EX', 3600);\n          // redisClient.expire(`R${authData.user.PM_User_MobileNumber}`, process.env.IDEL_SESSION_TIME); // session time\n          req.user = authData.user;\n          return next();\n        }\n        return res.status(401).json({ success: false, msg: 'Unauthorised access' });\n      });\n      return true;\n    });\n  } else {\n    return res.status(401).json({ success: false, msg: 'Unauthorised access' });\n  }\n  return true;\n  // });\n}\n"]}